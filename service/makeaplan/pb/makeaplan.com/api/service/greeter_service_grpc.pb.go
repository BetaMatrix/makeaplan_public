// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error)
	UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameReply, error)
	UpdateDeviceID(ctx context.Context, in *UpdateDeviceIDRequest, opts ...grpc.CallOption) (*UpdateDeviceIDReply, error)
	InitPerSetPlan(ctx context.Context, in *InitPerSetPlanRequest, opts ...grpc.CallOption) (*InitPerSetPlanReply, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

var greeterSayHelloStreamDesc = &grpc.StreamDesc{
	StreamName: "SayHello",
}

func (c *greeterClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var greeterStartStreamDesc = &grpc.StreamDesc{
	StreamName: "Start",
}

func (c *greeterClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartReply, error) {
	out := new(StartReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var greeterUpdateUsernameStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateUsername",
}

func (c *greeterClient) UpdateUsername(ctx context.Context, in *UpdateUsernameRequest, opts ...grpc.CallOption) (*UpdateUsernameReply, error) {
	out := new(UpdateUsernameReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/UpdateUsername", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var greeterUpdateDeviceIDStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateDeviceID",
}

func (c *greeterClient) UpdateDeviceID(ctx context.Context, in *UpdateDeviceIDRequest, opts ...grpc.CallOption) (*UpdateDeviceIDReply, error) {
	out := new(UpdateDeviceIDReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/UpdateDeviceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var greeterInitPerSetPlanStreamDesc = &grpc.StreamDesc{
	StreamName: "InitPerSetPlan",
}

func (c *greeterClient) InitPerSetPlan(ctx context.Context, in *InitPerSetPlanRequest, opts ...grpc.CallOption) (*InitPerSetPlanReply, error) {
	out := new(InitPerSetPlanReply)
	err := c.cc.Invoke(ctx, "/service.Greeter/InitPerSetPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterService is the service API for Greeter service.
// Fields should be assigned to their respective handler implementations only before
// RegisterGreeterService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type GreeterService struct {
	// Sends a greeting
	SayHello       func(context.Context, *HelloRequest) (*HelloReply, error)
	Start          func(context.Context, *StartRequest) (*StartReply, error)
	UpdateUsername func(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error)
	UpdateDeviceID func(context.Context, *UpdateDeviceIDRequest) (*UpdateDeviceIDReply, error)
	InitPerSetPlan func(context.Context, *InitPerSetPlanRequest) (*InitPerSetPlanReply, error)
}

func (s *GreeterService) sayHello(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.Greeter/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *GreeterService) start(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.Greeter/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *GreeterService) updateUsername(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.Greeter/UpdateUsername",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateUsername(ctx, req.(*UpdateUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *GreeterService) updateDeviceID(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateDeviceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.Greeter/UpdateDeviceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateDeviceID(ctx, req.(*UpdateDeviceIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *GreeterService) initPerSetPlan(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitPerSetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.InitPerSetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.Greeter/InitPerSetPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.InitPerSetPlan(ctx, req.(*InitPerSetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterGreeterService registers a service implementation with a gRPC server.
func RegisterGreeterService(s grpc.ServiceRegistrar, srv *GreeterService) {
	srvCopy := *srv
	if srvCopy.SayHello == nil {
		srvCopy.SayHello = func(context.Context, *HelloRequest) (*HelloReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
		}
	}
	if srvCopy.Start == nil {
		srvCopy.Start = func(context.Context, *StartRequest) (*StartReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
		}
	}
	if srvCopy.UpdateUsername == nil {
		srvCopy.UpdateUsername = func(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateUsername not implemented")
		}
	}
	if srvCopy.UpdateDeviceID == nil {
		srvCopy.UpdateDeviceID = func(context.Context, *UpdateDeviceIDRequest) (*UpdateDeviceIDReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceID not implemented")
		}
	}
	if srvCopy.InitPerSetPlan == nil {
		srvCopy.InitPerSetPlan = func(context.Context, *InitPerSetPlanRequest) (*InitPerSetPlanReply, error) {
			return nil, status.Errorf(codes.Unimplemented, "method InitPerSetPlan not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "service.Greeter",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "SayHello",
				Handler:    srvCopy.sayHello,
			},
			{
				MethodName: "Start",
				Handler:    srvCopy.start,
			},
			{
				MethodName: "UpdateUsername",
				Handler:    srvCopy.updateUsername,
			},
			{
				MethodName: "UpdateDeviceID",
				Handler:    srvCopy.updateDeviceID,
			},
			{
				MethodName: "InitPerSetPlan",
				Handler:    srvCopy.initPerSetPlan,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "greeter_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewGreeterService creates a new GreeterService containing the
// implemented methods of the Greeter service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewGreeterService(s interface{}) *GreeterService {
	ns := &GreeterService{}
	if h, ok := s.(interface {
		SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	}); ok {
		ns.SayHello = h.SayHello
	}
	if h, ok := s.(interface {
		Start(context.Context, *StartRequest) (*StartReply, error)
	}); ok {
		ns.Start = h.Start
	}
	if h, ok := s.(interface {
		UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error)
	}); ok {
		ns.UpdateUsername = h.UpdateUsername
	}
	if h, ok := s.(interface {
		UpdateDeviceID(context.Context, *UpdateDeviceIDRequest) (*UpdateDeviceIDReply, error)
	}); ok {
		ns.UpdateDeviceID = h.UpdateDeviceID
	}
	if h, ok := s.(interface {
		InitPerSetPlan(context.Context, *InitPerSetPlanRequest) (*InitPerSetPlanReply, error)
	}); ok {
		ns.InitPerSetPlan = h.InitPerSetPlan
	}
	return ns
}

// UnstableGreeterService is the service API for Greeter service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableGreeterService interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Start(context.Context, *StartRequest) (*StartReply, error)
	UpdateUsername(context.Context, *UpdateUsernameRequest) (*UpdateUsernameReply, error)
	UpdateDeviceID(context.Context, *UpdateDeviceIDRequest) (*UpdateDeviceIDReply, error)
	InitPerSetPlan(context.Context, *InitPerSetPlanRequest) (*InitPerSetPlanReply, error)
}
