// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PlanQueryClient is the client API for PlanQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanQueryClient interface {
	// 查询所有处于活跃状态(未归档)的计划
	QueryActivePlanSummary(ctx context.Context, in *QueryActivePlanSummaryRequest, opts ...grpc.CallOption) (*QueryActivePlanSummaryResponse, error)
	// 查询所有归档计划
	QueryArchivedPlan(ctx context.Context, in *QueryArchivedPlanRequest, opts ...grpc.CallOption) (*QueryArchivedPlanResponse, error)
	// 查询所有处于活跃状态(未归档)计划的索引(id)
	QueryActivePlanIndex(ctx context.Context, in *QueryActivePlanIndexRequest, opts ...grpc.CallOption) (*QueryActivePlanIndexResponse, error)
	// 查询指定计划
	QueryPlanSummary(ctx context.Context, in *QueryPlanSummaryRequest, opts ...grpc.CallOption) (*QueryPlanSummaryResponse, error)
	// 查询活跃计划和归档计划数量
	QueryPlanCount(ctx context.Context, in *QueryPlanCountRequest, opts ...grpc.CallOption) (*QueryPlanCountResponse, error)
}

type planQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanQueryClient(cc grpc.ClientConnInterface) PlanQueryClient {
	return &planQueryClient{cc}
}

var planQueryQueryActivePlanSummaryStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryActivePlanSummary",
}

func (c *planQueryClient) QueryActivePlanSummary(ctx context.Context, in *QueryActivePlanSummaryRequest, opts ...grpc.CallOption) (*QueryActivePlanSummaryResponse, error) {
	out := new(QueryActivePlanSummaryResponse)
	err := c.cc.Invoke(ctx, "/service.PlanQuery/QueryActivePlanSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planQueryQueryArchivedPlanStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryArchivedPlan",
}

func (c *planQueryClient) QueryArchivedPlan(ctx context.Context, in *QueryArchivedPlanRequest, opts ...grpc.CallOption) (*QueryArchivedPlanResponse, error) {
	out := new(QueryArchivedPlanResponse)
	err := c.cc.Invoke(ctx, "/service.PlanQuery/QueryArchivedPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planQueryQueryActivePlanIndexStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryActivePlanIndex",
}

func (c *planQueryClient) QueryActivePlanIndex(ctx context.Context, in *QueryActivePlanIndexRequest, opts ...grpc.CallOption) (*QueryActivePlanIndexResponse, error) {
	out := new(QueryActivePlanIndexResponse)
	err := c.cc.Invoke(ctx, "/service.PlanQuery/QueryActivePlanIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planQueryQueryPlanSummaryStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryPlanSummary",
}

func (c *planQueryClient) QueryPlanSummary(ctx context.Context, in *QueryPlanSummaryRequest, opts ...grpc.CallOption) (*QueryPlanSummaryResponse, error) {
	out := new(QueryPlanSummaryResponse)
	err := c.cc.Invoke(ctx, "/service.PlanQuery/QueryPlanSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planQueryQueryPlanCountStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryPlanCount",
}

func (c *planQueryClient) QueryPlanCount(ctx context.Context, in *QueryPlanCountRequest, opts ...grpc.CallOption) (*QueryPlanCountResponse, error) {
	out := new(QueryPlanCountResponse)
	err := c.cc.Invoke(ctx, "/service.PlanQuery/QueryPlanCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanQueryService is the service API for PlanQuery service.
// Fields should be assigned to their respective handler implementations only before
// RegisterPlanQueryService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type PlanQueryService struct {
	// 查询所有处于活跃状态(未归档)的计划
	QueryActivePlanSummary func(context.Context, *QueryActivePlanSummaryRequest) (*QueryActivePlanSummaryResponse, error)
	// 查询所有归档计划
	QueryArchivedPlan func(context.Context, *QueryArchivedPlanRequest) (*QueryArchivedPlanResponse, error)
	// 查询所有处于活跃状态(未归档)计划的索引(id)
	QueryActivePlanIndex func(context.Context, *QueryActivePlanIndexRequest) (*QueryActivePlanIndexResponse, error)
	// 查询指定计划
	QueryPlanSummary func(context.Context, *QueryPlanSummaryRequest) (*QueryPlanSummaryResponse, error)
	// 查询活跃计划和归档计划数量
	QueryPlanCount func(context.Context, *QueryPlanCountRequest) (*QueryPlanCountResponse, error)
}

func (s *PlanQueryService) queryActivePlanSummary(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivePlanSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryActivePlanSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanQuery/QueryActivePlanSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryActivePlanSummary(ctx, req.(*QueryActivePlanSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanQueryService) queryArchivedPlan(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryArchivedPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryArchivedPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanQuery/QueryArchivedPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryArchivedPlan(ctx, req.(*QueryArchivedPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanQueryService) queryActivePlanIndex(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActivePlanIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryActivePlanIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanQuery/QueryActivePlanIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryActivePlanIndex(ctx, req.(*QueryActivePlanIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanQueryService) queryPlanSummary(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryPlanSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanQuery/QueryPlanSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryPlanSummary(ctx, req.(*QueryPlanSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanQueryService) queryPlanCount(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryPlanCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanQuery/QueryPlanCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryPlanCount(ctx, req.(*QueryPlanCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterPlanQueryService registers a service implementation with a gRPC server.
func RegisterPlanQueryService(s grpc.ServiceRegistrar, srv *PlanQueryService) {
	srvCopy := *srv
	if srvCopy.QueryActivePlanSummary == nil {
		srvCopy.QueryActivePlanSummary = func(context.Context, *QueryActivePlanSummaryRequest) (*QueryActivePlanSummaryResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryActivePlanSummary not implemented")
		}
	}
	if srvCopy.QueryArchivedPlan == nil {
		srvCopy.QueryArchivedPlan = func(context.Context, *QueryArchivedPlanRequest) (*QueryArchivedPlanResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryArchivedPlan not implemented")
		}
	}
	if srvCopy.QueryActivePlanIndex == nil {
		srvCopy.QueryActivePlanIndex = func(context.Context, *QueryActivePlanIndexRequest) (*QueryActivePlanIndexResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryActivePlanIndex not implemented")
		}
	}
	if srvCopy.QueryPlanSummary == nil {
		srvCopy.QueryPlanSummary = func(context.Context, *QueryPlanSummaryRequest) (*QueryPlanSummaryResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryPlanSummary not implemented")
		}
	}
	if srvCopy.QueryPlanCount == nil {
		srvCopy.QueryPlanCount = func(context.Context, *QueryPlanCountRequest) (*QueryPlanCountResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryPlanCount not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "service.PlanQuery",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "QueryActivePlanSummary",
				Handler:    srvCopy.queryActivePlanSummary,
			},
			{
				MethodName: "QueryArchivedPlan",
				Handler:    srvCopy.queryArchivedPlan,
			},
			{
				MethodName: "QueryActivePlanIndex",
				Handler:    srvCopy.queryActivePlanIndex,
			},
			{
				MethodName: "QueryPlanSummary",
				Handler:    srvCopy.queryPlanSummary,
			},
			{
				MethodName: "QueryPlanCount",
				Handler:    srvCopy.queryPlanCount,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "plan_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewPlanQueryService creates a new PlanQueryService containing the
// implemented methods of the PlanQuery service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewPlanQueryService(s interface{}) *PlanQueryService {
	ns := &PlanQueryService{}
	if h, ok := s.(interface {
		QueryActivePlanSummary(context.Context, *QueryActivePlanSummaryRequest) (*QueryActivePlanSummaryResponse, error)
	}); ok {
		ns.QueryActivePlanSummary = h.QueryActivePlanSummary
	}
	if h, ok := s.(interface {
		QueryArchivedPlan(context.Context, *QueryArchivedPlanRequest) (*QueryArchivedPlanResponse, error)
	}); ok {
		ns.QueryArchivedPlan = h.QueryArchivedPlan
	}
	if h, ok := s.(interface {
		QueryActivePlanIndex(context.Context, *QueryActivePlanIndexRequest) (*QueryActivePlanIndexResponse, error)
	}); ok {
		ns.QueryActivePlanIndex = h.QueryActivePlanIndex
	}
	if h, ok := s.(interface {
		QueryPlanSummary(context.Context, *QueryPlanSummaryRequest) (*QueryPlanSummaryResponse, error)
	}); ok {
		ns.QueryPlanSummary = h.QueryPlanSummary
	}
	if h, ok := s.(interface {
		QueryPlanCount(context.Context, *QueryPlanCountRequest) (*QueryPlanCountResponse, error)
	}); ok {
		ns.QueryPlanCount = h.QueryPlanCount
	}
	return ns
}

// UnstablePlanQueryService is the service API for PlanQuery service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstablePlanQueryService interface {
	// 查询所有处于活跃状态(未归档)的计划
	QueryActivePlanSummary(context.Context, *QueryActivePlanSummaryRequest) (*QueryActivePlanSummaryResponse, error)
	// 查询所有归档计划
	QueryArchivedPlan(context.Context, *QueryArchivedPlanRequest) (*QueryArchivedPlanResponse, error)
	// 查询所有处于活跃状态(未归档)计划的索引(id)
	QueryActivePlanIndex(context.Context, *QueryActivePlanIndexRequest) (*QueryActivePlanIndexResponse, error)
	// 查询指定计划
	QueryPlanSummary(context.Context, *QueryPlanSummaryRequest) (*QueryPlanSummaryResponse, error)
	// 查询活跃计划和归档计划数量
	QueryPlanCount(context.Context, *QueryPlanCountRequest) (*QueryPlanCountResponse, error)
}

// PlanModifyClient is the client API for PlanModify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanModifyClient interface {
	// 创建计划
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error)
	// 删除计划
	DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error)
	// 更新计划
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error)
	// 更新计划 Archived 状态
	UpdatePlanArchiveState(ctx context.Context, in *UpdatePlanArchiveStateRequest, opts ...grpc.CallOption) (*UpdatePlanArchiveStateResponse, error)
	// 更新计划当前完成目标值
	UpdatePlanCompletedIndex(ctx context.Context, in *UpdatePlanCompletedIndexRequest, opts ...grpc.CallOption) (*UpdatePlanCompletedIndexResponse, error)
}

type planModifyClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanModifyClient(cc grpc.ClientConnInterface) PlanModifyClient {
	return &planModifyClient{cc}
}

var planModifyCreatePlanStreamDesc = &grpc.StreamDesc{
	StreamName: "CreatePlan",
}

func (c *planModifyClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*CreatePlanResponse, error) {
	out := new(CreatePlanResponse)
	err := c.cc.Invoke(ctx, "/service.PlanModify/CreatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planModifyDeletePlanStreamDesc = &grpc.StreamDesc{
	StreamName: "DeletePlan",
}

func (c *planModifyClient) DeletePlan(ctx context.Context, in *DeletePlanRequest, opts ...grpc.CallOption) (*DeletePlanResponse, error) {
	out := new(DeletePlanResponse)
	err := c.cc.Invoke(ctx, "/service.PlanModify/DeletePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planModifyUpdatePlanStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdatePlan",
}

func (c *planModifyClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*UpdatePlanResponse, error) {
	out := new(UpdatePlanResponse)
	err := c.cc.Invoke(ctx, "/service.PlanModify/UpdatePlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planModifyUpdatePlanArchiveStateStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdatePlanArchiveState",
}

func (c *planModifyClient) UpdatePlanArchiveState(ctx context.Context, in *UpdatePlanArchiveStateRequest, opts ...grpc.CallOption) (*UpdatePlanArchiveStateResponse, error) {
	out := new(UpdatePlanArchiveStateResponse)
	err := c.cc.Invoke(ctx, "/service.PlanModify/UpdatePlanArchiveState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var planModifyUpdatePlanCompletedIndexStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdatePlanCompletedIndex",
}

func (c *planModifyClient) UpdatePlanCompletedIndex(ctx context.Context, in *UpdatePlanCompletedIndexRequest, opts ...grpc.CallOption) (*UpdatePlanCompletedIndexResponse, error) {
	out := new(UpdatePlanCompletedIndexResponse)
	err := c.cc.Invoke(ctx, "/service.PlanModify/UpdatePlanCompletedIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanModifyService is the service API for PlanModify service.
// Fields should be assigned to their respective handler implementations only before
// RegisterPlanModifyService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type PlanModifyService struct {
	// 创建计划
	CreatePlan func(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	// 删除计划
	DeletePlan func(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	// 更新计划
	UpdatePlan func(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	// 更新计划 Archived 状态
	UpdatePlanArchiveState func(context.Context, *UpdatePlanArchiveStateRequest) (*UpdatePlanArchiveStateResponse, error)
	// 更新计划当前完成目标值
	UpdatePlanCompletedIndex func(context.Context, *UpdatePlanCompletedIndexRequest) (*UpdatePlanCompletedIndexResponse, error)
}

func (s *PlanModifyService) createPlan(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanModify/CreatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanModifyService) deletePlan(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeletePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanModify/DeletePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeletePlan(ctx, req.(*DeletePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanModifyService) updatePlan(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanModify/UpdatePlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanModifyService) updatePlanArchiveState(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanArchiveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdatePlanArchiveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanModify/UpdatePlanArchiveState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePlanArchiveState(ctx, req.(*UpdatePlanArchiveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *PlanModifyService) updatePlanCompletedIndex(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanCompletedIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdatePlanCompletedIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.PlanModify/UpdatePlanCompletedIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdatePlanCompletedIndex(ctx, req.(*UpdatePlanCompletedIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterPlanModifyService registers a service implementation with a gRPC server.
func RegisterPlanModifyService(s grpc.ServiceRegistrar, srv *PlanModifyService) {
	srvCopy := *srv
	if srvCopy.CreatePlan == nil {
		srvCopy.CreatePlan = func(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
		}
	}
	if srvCopy.DeletePlan == nil {
		srvCopy.DeletePlan = func(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeletePlan not implemented")
		}
	}
	if srvCopy.UpdatePlan == nil {
		srvCopy.UpdatePlan = func(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
		}
	}
	if srvCopy.UpdatePlanArchiveState == nil {
		srvCopy.UpdatePlanArchiveState = func(context.Context, *UpdatePlanArchiveStateRequest) (*UpdatePlanArchiveStateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanArchiveState not implemented")
		}
	}
	if srvCopy.UpdatePlanCompletedIndex == nil {
		srvCopy.UpdatePlanCompletedIndex = func(context.Context, *UpdatePlanCompletedIndexRequest) (*UpdatePlanCompletedIndexResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdatePlanCompletedIndex not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "service.PlanModify",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreatePlan",
				Handler:    srvCopy.createPlan,
			},
			{
				MethodName: "DeletePlan",
				Handler:    srvCopy.deletePlan,
			},
			{
				MethodName: "UpdatePlan",
				Handler:    srvCopy.updatePlan,
			},
			{
				MethodName: "UpdatePlanArchiveState",
				Handler:    srvCopy.updatePlanArchiveState,
			},
			{
				MethodName: "UpdatePlanCompletedIndex",
				Handler:    srvCopy.updatePlanCompletedIndex,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "plan_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewPlanModifyService creates a new PlanModifyService containing the
// implemented methods of the PlanModify service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewPlanModifyService(s interface{}) *PlanModifyService {
	ns := &PlanModifyService{}
	if h, ok := s.(interface {
		CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	}); ok {
		ns.CreatePlan = h.CreatePlan
	}
	if h, ok := s.(interface {
		DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	}); ok {
		ns.DeletePlan = h.DeletePlan
	}
	if h, ok := s.(interface {
		UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	}); ok {
		ns.UpdatePlan = h.UpdatePlan
	}
	if h, ok := s.(interface {
		UpdatePlanArchiveState(context.Context, *UpdatePlanArchiveStateRequest) (*UpdatePlanArchiveStateResponse, error)
	}); ok {
		ns.UpdatePlanArchiveState = h.UpdatePlanArchiveState
	}
	if h, ok := s.(interface {
		UpdatePlanCompletedIndex(context.Context, *UpdatePlanCompletedIndexRequest) (*UpdatePlanCompletedIndexResponse, error)
	}); ok {
		ns.UpdatePlanCompletedIndex = h.UpdatePlanCompletedIndex
	}
	return ns
}

// UnstablePlanModifyService is the service API for PlanModify service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstablePlanModifyService interface {
	// 创建计划
	CreatePlan(context.Context, *CreatePlanRequest) (*CreatePlanResponse, error)
	// 删除计划
	DeletePlan(context.Context, *DeletePlanRequest) (*DeletePlanResponse, error)
	// 更新计划
	UpdatePlan(context.Context, *UpdatePlanRequest) (*UpdatePlanResponse, error)
	// 更新计划 Archived 状态
	UpdatePlanArchiveState(context.Context, *UpdatePlanArchiveStateRequest) (*UpdatePlanArchiveStateResponse, error)
	// 更新计划当前完成目标值
	UpdatePlanCompletedIndex(context.Context, *UpdatePlanCompletedIndexRequest) (*UpdatePlanCompletedIndexResponse, error)
}
