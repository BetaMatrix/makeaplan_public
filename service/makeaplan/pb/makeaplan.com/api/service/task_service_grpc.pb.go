// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TaskQueryClient is the client API for TaskQuery service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskQueryClient interface {
	// 查询计划的所有任务，指定阶段则查询指定计划指定阶段的所有任务
	QueryPlanTask(ctx context.Context, in *QueryPlanTaskRequest, opts ...grpc.CallOption) (*QueryPlanTaskResponse, error)
	// 查询指定任务
	QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error)
}

type taskQueryClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskQueryClient(cc grpc.ClientConnInterface) TaskQueryClient {
	return &taskQueryClient{cc}
}

var taskQueryQueryPlanTaskStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryPlanTask",
}

func (c *taskQueryClient) QueryPlanTask(ctx context.Context, in *QueryPlanTaskRequest, opts ...grpc.CallOption) (*QueryPlanTaskResponse, error) {
	out := new(QueryPlanTaskResponse)
	err := c.cc.Invoke(ctx, "/service.TaskQuery/QueryPlanTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var taskQueryQueryTaskStreamDesc = &grpc.StreamDesc{
	StreamName: "QueryTask",
}

func (c *taskQueryClient) QueryTask(ctx context.Context, in *QueryTaskRequest, opts ...grpc.CallOption) (*QueryTaskResponse, error) {
	out := new(QueryTaskResponse)
	err := c.cc.Invoke(ctx, "/service.TaskQuery/QueryTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskQueryService is the service API for TaskQuery service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTaskQueryService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TaskQueryService struct {
	// 查询计划的所有任务，指定阶段则查询指定计划指定阶段的所有任务
	QueryPlanTask func(context.Context, *QueryPlanTaskRequest) (*QueryPlanTaskResponse, error)
	// 查询指定任务
	QueryTask func(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
}

func (s *TaskQueryService) queryPlanTask(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPlanTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryPlanTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskQuery/QueryPlanTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryPlanTask(ctx, req.(*QueryPlanTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TaskQueryService) queryTask(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.QueryTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskQuery/QueryTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.QueryTask(ctx, req.(*QueryTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTaskQueryService registers a service implementation with a gRPC server.
func RegisterTaskQueryService(s grpc.ServiceRegistrar, srv *TaskQueryService) {
	srvCopy := *srv
	if srvCopy.QueryPlanTask == nil {
		srvCopy.QueryPlanTask = func(context.Context, *QueryPlanTaskRequest) (*QueryPlanTaskResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryPlanTask not implemented")
		}
	}
	if srvCopy.QueryTask == nil {
		srvCopy.QueryTask = func(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method QueryTask not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "service.TaskQuery",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "QueryPlanTask",
				Handler:    srvCopy.queryPlanTask,
			},
			{
				MethodName: "QueryTask",
				Handler:    srvCopy.queryTask,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "task_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTaskQueryService creates a new TaskQueryService containing the
// implemented methods of the TaskQuery service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTaskQueryService(s interface{}) *TaskQueryService {
	ns := &TaskQueryService{}
	if h, ok := s.(interface {
		QueryPlanTask(context.Context, *QueryPlanTaskRequest) (*QueryPlanTaskResponse, error)
	}); ok {
		ns.QueryPlanTask = h.QueryPlanTask
	}
	if h, ok := s.(interface {
		QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
	}); ok {
		ns.QueryTask = h.QueryTask
	}
	return ns
}

// UnstableTaskQueryService is the service API for TaskQuery service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTaskQueryService interface {
	// 查询计划的所有任务，指定阶段则查询指定计划指定阶段的所有任务
	QueryPlanTask(context.Context, *QueryPlanTaskRequest) (*QueryPlanTaskResponse, error)
	// 查询指定任务
	QueryTask(context.Context, *QueryTaskRequest) (*QueryTaskResponse, error)
}

// TaskModifyClient is the client API for TaskModify service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskModifyClient interface {
	// 创建任务
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error)
	// 编辑任务
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error)
	// 删除任务
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error)
	// 更新任务 check 状态
	UpdateTaskCheckState(ctx context.Context, in *UpdateTaskCheckStateRequest, opts ...grpc.CallOption) (*UpdateTaskCheckStateResponse, error)
}

type taskModifyClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskModifyClient(cc grpc.ClientConnInterface) TaskModifyClient {
	return &taskModifyClient{cc}
}

var taskModifyCreateTaskStreamDesc = &grpc.StreamDesc{
	StreamName: "CreateTask",
}

func (c *taskModifyClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*CreateTaskResponse, error) {
	out := new(CreateTaskResponse)
	err := c.cc.Invoke(ctx, "/service.TaskModify/CreateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var taskModifyUpdateTaskStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateTask",
}

func (c *taskModifyClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*UpdateTaskResponse, error) {
	out := new(UpdateTaskResponse)
	err := c.cc.Invoke(ctx, "/service.TaskModify/UpdateTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var taskModifyDeleteTaskStreamDesc = &grpc.StreamDesc{
	StreamName: "DeleteTask",
}

func (c *taskModifyClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*DeleteTaskResponse, error) {
	out := new(DeleteTaskResponse)
	err := c.cc.Invoke(ctx, "/service.TaskModify/DeleteTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var taskModifyUpdateTaskCheckStateStreamDesc = &grpc.StreamDesc{
	StreamName: "UpdateTaskCheckState",
}

func (c *taskModifyClient) UpdateTaskCheckState(ctx context.Context, in *UpdateTaskCheckStateRequest, opts ...grpc.CallOption) (*UpdateTaskCheckStateResponse, error) {
	out := new(UpdateTaskCheckStateResponse)
	err := c.cc.Invoke(ctx, "/service.TaskModify/UpdateTaskCheckState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskModifyService is the service API for TaskModify service.
// Fields should be assigned to their respective handler implementations only before
// RegisterTaskModifyService is called.  Any unassigned fields will result in the
// handler for that method returning an Unimplemented error.
type TaskModifyService struct {
	// 创建任务
	CreateTask func(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// 编辑任务
	UpdateTask func(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// 删除任务
	DeleteTask func(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// 更新任务 check 状态
	UpdateTaskCheckState func(context.Context, *UpdateTaskCheckStateRequest) (*UpdateTaskCheckStateResponse, error)
}

func (s *TaskModifyService) createTask(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskModify/CreateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TaskModifyService) updateTask(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskModify/UpdateTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TaskModifyService) deleteTask(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskModify/DeleteTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}
func (s *TaskModifyService) updateTaskCheckState(_ interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskCheckStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return s.UpdateTaskCheckState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     s,
		FullMethod: "/service.TaskModify/UpdateTaskCheckState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return s.UpdateTaskCheckState(ctx, req.(*UpdateTaskCheckStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegisterTaskModifyService registers a service implementation with a gRPC server.
func RegisterTaskModifyService(s grpc.ServiceRegistrar, srv *TaskModifyService) {
	srvCopy := *srv
	if srvCopy.CreateTask == nil {
		srvCopy.CreateTask = func(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
		}
	}
	if srvCopy.UpdateTask == nil {
		srvCopy.UpdateTask = func(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
		}
	}
	if srvCopy.DeleteTask == nil {
		srvCopy.DeleteTask = func(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
		}
	}
	if srvCopy.UpdateTaskCheckState == nil {
		srvCopy.UpdateTaskCheckState = func(context.Context, *UpdateTaskCheckStateRequest) (*UpdateTaskCheckStateResponse, error) {
			return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskCheckState not implemented")
		}
	}
	sd := grpc.ServiceDesc{
		ServiceName: "service.TaskModify",
		Methods: []grpc.MethodDesc{
			{
				MethodName: "CreateTask",
				Handler:    srvCopy.createTask,
			},
			{
				MethodName: "UpdateTask",
				Handler:    srvCopy.updateTask,
			},
			{
				MethodName: "DeleteTask",
				Handler:    srvCopy.deleteTask,
			},
			{
				MethodName: "UpdateTaskCheckState",
				Handler:    srvCopy.updateTaskCheckState,
			},
		},
		Streams:  []grpc.StreamDesc{},
		Metadata: "task_service.proto",
	}

	s.RegisterService(&sd, nil)
}

// NewTaskModifyService creates a new TaskModifyService containing the
// implemented methods of the TaskModify service in s.  Any unimplemented
// methods will result in the gRPC server returning an UNIMPLEMENTED status to the client.
// This includes situations where the method handler is misspelled or has the wrong
// signature.  For this reason, this function should be used with great care and
// is not recommended to be used by most users.
func NewTaskModifyService(s interface{}) *TaskModifyService {
	ns := &TaskModifyService{}
	if h, ok := s.(interface {
		CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	}); ok {
		ns.CreateTask = h.CreateTask
	}
	if h, ok := s.(interface {
		UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	}); ok {
		ns.UpdateTask = h.UpdateTask
	}
	if h, ok := s.(interface {
		DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	}); ok {
		ns.DeleteTask = h.DeleteTask
	}
	if h, ok := s.(interface {
		UpdateTaskCheckState(context.Context, *UpdateTaskCheckStateRequest) (*UpdateTaskCheckStateResponse, error)
	}); ok {
		ns.UpdateTaskCheckState = h.UpdateTaskCheckState
	}
	return ns
}

// UnstableTaskModifyService is the service API for TaskModify service.
// New methods may be added to this interface if they are added to the service
// definition, which is not a backward-compatible change.  For this reason,
// use of this type is not recommended.
type UnstableTaskModifyService interface {
	// 创建任务
	CreateTask(context.Context, *CreateTaskRequest) (*CreateTaskResponse, error)
	// 编辑任务
	UpdateTask(context.Context, *UpdateTaskRequest) (*UpdateTaskResponse, error)
	// 删除任务
	DeleteTask(context.Context, *DeleteTaskRequest) (*DeleteTaskResponse, error)
	// 更新任务 check 状态
	UpdateTaskCheckState(context.Context, *UpdateTaskCheckStateRequest) (*UpdateTaskCheckStateResponse, error)
}
